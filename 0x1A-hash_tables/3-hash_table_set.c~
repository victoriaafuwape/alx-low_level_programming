#include "hash_tables.h"

/**
 * hash_table_set - Adds an element to the hash table
 * @ht: The hash table you want to add or update the key/value to
 * @key: The key, cannot be an empty string
 * @value: The value associated with the key, must be duplicated
 *
 * Return: 1 if it succeeded, 0 otherwise
 */
int hash_table_set(hash_table_t *ht, const char *key, const char *value)
{
	unsigned long int index;
	hash_node_t *new_node, *current_node;

	/* Check if the input is valid */
	if (!ht || !key || strlen(key) == 0 || !value)
		return (0);

	/* Compute the index for the key */
	index = key_index((const unsigned char *)key, ht->size);

	/* Check for collision at the index */
	current_node = ht->array[index];
	while (current_node)
	{
		/* Update value if key already exists */
		if (strcmp(current_node->key, key) == 0)
		{
			free(current_node->value);
			current_node->value = strdup(value);
			return (1);
		}
		current_node = current_node->next;
	}

	/* Create new node */
	new_node = malloc(sizeof(hash_node_t));
	if (!new_node)
		return (0);

	new_node->key = strdup(key);
	new_node->value = strdup(value);
	if (!new_node->key || !new_node->value)
	{
		free(new_node->key);
		free(new_node->value);
		free(new_node);
		return (0);
	}

	/* Insert at the beginning of the list to handle collision */
	new_node->next = ht->array[index];
	ht->array[index] = new_node;

	return (1);
}
